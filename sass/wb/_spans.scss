@import 'init';

/* --------------------------------- */
/* GRID: SPANS
/* --------------------------------- */

  // STACKED (SHARED STYLES) ----------------

  [class*='#{$wb-prefix}span-'] {
    position: relative;
    min-height: 1px;
    @include box-sizing(border-box);
  }
  
  // INLINE ----------------
  
  @mixin wb-spans-at-breakpoint($breakpoint-suffix) {
    $processed-spans: ();
    
    @for $b from 1 through $wb-grid-columns-count {
      @for $a from 1 through $b {
        @if index($processed-spans, #{$a/$b}) == null {
          $processed-spans: append($processed-spans, #{$a/$b});
          .#{$wb-prefix}span#{$breakpoint-suffix}-#{$a}-#{$b} { width: (100% * $a / $b); }
        }
      }
    }
    
    [class*='#{$wb-prefix}span#{$breakpoint-suffix}-'] {
      float: left;
      clear: none;
    }
    
    // first
    .#{$wb-prefix}span#{$breakpoint-suffix}-first {
      clear: left;
    }
    
    // last
    .#{$wb-prefix}span#{$breakpoint-suffix}-last {
      float: right;
    }
    
    // centered
    .#{$wb-prefix}span#{$breakpoint-suffix}-centered {
      clear: both;
      float: none;
      margin-right: auto;
      margin-left: auto;
    }
  }
  
  // create .span classes for each breakpoint
  $wb-processed-breakpoint-name: null;
  
  @each $wb-breakpoint-name, $wb-breakpoint in $wb-breakpoints {
    @if $wb-processed-breakpoint-name != null {
      @include wb-media('>#{$wb-processed-breakpoint-name}') {
        @include wb-spans-at-breakpoint(map-get($wb-breakpoint, 'suffix'));
      }
    }
    @else {
      @include wb-spans-at-breakpoint(map-get($wb-breakpoint, 'suffix'));
    }
    
    $wb-processed-breakpoint-name: $wb-breakpoint-name;
  }